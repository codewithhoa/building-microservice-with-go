// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/codewithhoa/building-microservice-with-go/product-api/pkg/sdk/models"
)

// ListSingleProductReader is a Reader for the ListSingleProduct structure.
type ListSingleProductReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSingleProductReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSingleProductOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListSingleProductBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListSingleProductNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListSingleProductInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListSingleProductDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListSingleProductOK creates a ListSingleProductOK with default headers values
func NewListSingleProductOK() *ListSingleProductOK {
	return &ListSingleProductOK{}
}

/*
ListSingleProductOK describes a response with status code 200, with default header values.

successful operation
*/
type ListSingleProductOK struct {
	Payload *models.SuccessSingleProductResponses
}

// IsSuccess returns true when this list single product o k response has a 2xx status code
func (o *ListSingleProductOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list single product o k response has a 3xx status code
func (o *ListSingleProductOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list single product o k response has a 4xx status code
func (o *ListSingleProductOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list single product o k response has a 5xx status code
func (o *ListSingleProductOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list single product o k response a status code equal to that given
func (o *ListSingleProductOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list single product o k response
func (o *ListSingleProductOK) Code() int {
	return 200
}

func (o *ListSingleProductOK) Error() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductOK  %+v", 200, o.Payload)
}

func (o *ListSingleProductOK) String() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductOK  %+v", 200, o.Payload)
}

func (o *ListSingleProductOK) GetPayload() *models.SuccessSingleProductResponses {
	return o.Payload
}

func (o *ListSingleProductOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessSingleProductResponses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSingleProductBadRequest creates a ListSingleProductBadRequest with default headers values
func NewListSingleProductBadRequest() *ListSingleProductBadRequest {
	return &ListSingleProductBadRequest{}
}

/*
ListSingleProductBadRequest describes a response with status code 400, with default header values.

invalid ID supplied
*/
type ListSingleProductBadRequest struct {
	Payload *models.ErrorResponses
}

// IsSuccess returns true when this list single product bad request response has a 2xx status code
func (o *ListSingleProductBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list single product bad request response has a 3xx status code
func (o *ListSingleProductBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list single product bad request response has a 4xx status code
func (o *ListSingleProductBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list single product bad request response has a 5xx status code
func (o *ListSingleProductBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list single product bad request response a status code equal to that given
func (o *ListSingleProductBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list single product bad request response
func (o *ListSingleProductBadRequest) Code() int {
	return 400
}

func (o *ListSingleProductBadRequest) Error() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductBadRequest  %+v", 400, o.Payload)
}

func (o *ListSingleProductBadRequest) String() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductBadRequest  %+v", 400, o.Payload)
}

func (o *ListSingleProductBadRequest) GetPayload() *models.ErrorResponses {
	return o.Payload
}

func (o *ListSingleProductBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSingleProductNotFound creates a ListSingleProductNotFound with default headers values
func NewListSingleProductNotFound() *ListSingleProductNotFound {
	return &ListSingleProductNotFound{}
}

/*
ListSingleProductNotFound describes a response with status code 404, with default header values.

not found error
*/
type ListSingleProductNotFound struct {
	Payload *models.ErrorResponses
}

// IsSuccess returns true when this list single product not found response has a 2xx status code
func (o *ListSingleProductNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list single product not found response has a 3xx status code
func (o *ListSingleProductNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list single product not found response has a 4xx status code
func (o *ListSingleProductNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list single product not found response has a 5xx status code
func (o *ListSingleProductNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list single product not found response a status code equal to that given
func (o *ListSingleProductNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list single product not found response
func (o *ListSingleProductNotFound) Code() int {
	return 404
}

func (o *ListSingleProductNotFound) Error() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductNotFound  %+v", 404, o.Payload)
}

func (o *ListSingleProductNotFound) String() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductNotFound  %+v", 404, o.Payload)
}

func (o *ListSingleProductNotFound) GetPayload() *models.ErrorResponses {
	return o.Payload
}

func (o *ListSingleProductNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSingleProductInternalServerError creates a ListSingleProductInternalServerError with default headers values
func NewListSingleProductInternalServerError() *ListSingleProductInternalServerError {
	return &ListSingleProductInternalServerError{}
}

/*
ListSingleProductInternalServerError describes a response with status code 500, with default header values.

internal error occur in server
*/
type ListSingleProductInternalServerError struct {
	Payload *models.ErrorResponses
}

// IsSuccess returns true when this list single product internal server error response has a 2xx status code
func (o *ListSingleProductInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list single product internal server error response has a 3xx status code
func (o *ListSingleProductInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list single product internal server error response has a 4xx status code
func (o *ListSingleProductInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list single product internal server error response has a 5xx status code
func (o *ListSingleProductInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list single product internal server error response a status code equal to that given
func (o *ListSingleProductInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list single product internal server error response
func (o *ListSingleProductInternalServerError) Code() int {
	return 500
}

func (o *ListSingleProductInternalServerError) Error() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSingleProductInternalServerError) String() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProductInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSingleProductInternalServerError) GetPayload() *models.ErrorResponses {
	return o.Payload
}

func (o *ListSingleProductInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSingleProductDefault creates a ListSingleProductDefault with default headers values
func NewListSingleProductDefault(code int) *ListSingleProductDefault {
	return &ListSingleProductDefault{
		_statusCode: code,
	}
}

/*
ListSingleProductDefault describes a response with status code -1, with default header values.

successful operation
*/
type ListSingleProductDefault struct {
	_statusCode int

	Payload *models.SuccessSingleProductResponses
}

// IsSuccess returns true when this list single product default response has a 2xx status code
func (o *ListSingleProductDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list single product default response has a 3xx status code
func (o *ListSingleProductDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list single product default response has a 4xx status code
func (o *ListSingleProductDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list single product default response has a 5xx status code
func (o *ListSingleProductDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list single product default response a status code equal to that given
func (o *ListSingleProductDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list single product default response
func (o *ListSingleProductDefault) Code() int {
	return o._statusCode
}

func (o *ListSingleProductDefault) Error() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProduct default  %+v", o._statusCode, o.Payload)
}

func (o *ListSingleProductDefault) String() string {
	return fmt.Sprintf("[GET /products/{id}][%d] listSingleProduct default  %+v", o._statusCode, o.Payload)
}

func (o *ListSingleProductDefault) GetPayload() *models.SuccessSingleProductResponses {
	return o.Payload
}

func (o *ListSingleProductDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessSingleProductResponses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
