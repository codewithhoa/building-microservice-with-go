// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaData MetaData defines the structure for meta data
//
// swagger:model MetaData
type MetaData struct {

	// The HasNext is true if have result in the next page
	// Example: true
	HasNext bool `json:"hasNext,omitempty"`

	// The Page is page which user want retrieve
	// Example: 2
	// Minimum: 1
	Page int64 `json:"page,omitempty"`

	// The PageSize is total items of one page
	// Example: 10
	// Minimum: 1
	PageSize int64 `json:"pageSize,omitempty"`

	// The sort
	// Example: ["+createdAt","-name"]
	Sort []string `json:"sort"`

	// The TotalPages is total of page
	// Example: 100
	TotalPages int64 `json:"totalPages,omitempty"`

	// The TotalRecords is total records
	// Example: 1000
	TotalRecords int64 `json:"totalRecords,omitempty"`
}

// Validate validates this meta data
func (m *MetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaData) validatePage(formats strfmt.Registry) error {
	if swag.IsZero(m.Page) { // not required
		return nil
	}

	if err := validate.MinimumInt("page", "body", m.Page, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *MetaData) validatePageSize(formats strfmt.Registry) error {
	if swag.IsZero(m.PageSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("pageSize", "body", m.PageSize, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this meta data based on context it is used
func (m *MetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaData) UnmarshalBinary(b []byte) error {
	var res MetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
